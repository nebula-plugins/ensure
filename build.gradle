apply plugin: 'groovy'

repositories {
    jcenter()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:1.8.8'
    compile 'commons-cli:commons-cli:1.2'

    // Logging
    compile 'org.slf4j:slf4j-api:1.7.5' // for us to use
    runtime 'org.slf4j:jul-to-slf4j:1.7.5'
    runtime 'org.slf4j:jcl-over-slf4j:1.7.5'
    runtime 'org.slf4j:log4j-over-slf4j:1.7.5'
    compile 'ch.qos.logback:logback-classic:1.0.13' // implementation

    compile 'org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5'
    compile 'com.jfrog.bintray.client:bintray-client-java-impl:0.1.1'
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1' // To get PATCH
    testCompile ('org.spockframework:spock-core:0.7-groovy-1.8') { exclude group: 'org.codehaus.groovy' }
    testCompile 'cglib:cglib-nodep:2.2.2' // For Mocking classes with Spock
}

task('ensureNebula', type: EnsureTask) {
    //args '--dryrun'
    //debug true
}

task('ensureNebulaRepo', type: EnsureTask) {
    // Look for project property of repo
    assert project.hasProperty('repo')
    args '--ensureRepo', '--repo', project.repo
    if (project.hasProperty('description') && project.description) {
        args '--description', project.description
    }
}

class EnsureTask extends JavaExec {}

tasks.withType(EnsureTask) {
    main 'netflix.ensure.Cli'
    classpath = sourceSets.main.runtimeClasspath
    if (!project.hasProperty('ensureConfig')) {
        throw new RuntimeException('You must set `-PensureConfig=<filename>`')
    }
    def ensureConfigFile = project.file(project.ensureConfig)
    if (!ensureConfigFile.exists()) {
        throw new RuntimeException("${project.ensureConfig} does not exist")
    }

    args '--configFile', project.ensureConfig
    if (project.hasProperty('dryRun')) {
        args '--dryrun'
    }
}
